const config = require('../settings');
const { lee } = require('../lee');
const DY_SCRAP = require('@dark-yasiya/scrap');
const dy_scrap = new DY_SCRAP();

function replaceYouTubeID(url) {
    const regex = /(?:youtube\.com\/(?:.*v=|.*\/)|youtu\.be\/|youtube\.com\/embed\/|youtube\.com\/shorts\/)([a-zA-Z0-9_-]{11})/;
    const match = url.match(regex);
    return match ? match[1] : null;
}

lee({
    pattern: "song",
    alias: ["s"],
    react: "üéµ",
    desc: "Download Ytmp3",
    category: "download",
    use: ".song <Text or YT URL>",
    filename: __filename
}, async (conn, m, mek, { from, q, reply }) => {
    try {
        if (!q) return await reply("‚ùå Please provide a Query or Youtube URL!");

        let id = q.startsWith("https://") ? replaceYouTubeID(q) : null;

        if (!id) {
            const searchResults = await dy_scrap.ytsearch(q);
            if (!searchResults?.results?.length) return await reply("‚ùå No results found!");
            id = searchResults.results[0].videoId;
        }

        const data = await dy_scrap.ytsearch(`https://youtube.com/watch?v=${id}`);
        if (!data?.results?.length) return await reply("‚ùå Failed to fetch video!");

        const { url, title, image, timestamp, ago, views, author } = data.results[0];

        let info = `
‚ï≠‚îÄ‚îÄ‚îÄ„Äé üéß ùöúùöòùöóùöê ùöçùöòùö†ùöóùöïùöòùöäùöçùöéùöõ „Äè‚îÄ‚îÄ
‚îÇ
‚îÇ üìÄ ùöÉùô∏ùöÉùôªùô¥    : ${title || "Unknown"}
‚îÇ ‚è±Ô∏è ùô≥ùöÑùöÅùô∞ùöÉùô∏ùôæùôΩ : ${timestamp || "Unknown"}
‚îÇ üëÅÔ∏è ùöÖùô∏ùô¥ùöÜùöÇ    : ${views || "Unknown"}
‚îÇ üåç ùôøùöÑùô±ùôªùô∏ùöÇùô∑ùô¥ùô≥ : ${ago || "Unknown"}
‚îÇ üë§ ùô∞ùöÑùöÉùô∑ùôæùöÅ   : ${author?.name || "Unknown"}
‚îÇ üîó ùöÑùöÅùôª      : ${url || "Unknown"}
‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

‚ï≠‚îÄ‚îÄ‚îÄ‚åØ ùô≤ùô∑ùôæùôæùöÇùô¥ ùöÉùöàùôøùô¥ ‚åØ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ ùü∑. üéµ ùöäùöûùöçùöíùöò ùöùùö¢ùöôùöé (ùöôùöïùöäùö¢)
‚îÇ ùü∏. üìÅ ùöçùöòùöåùöûùöñùöéùöóùöù ùöùùö¢ùöôùöé (ùöúùöäùöüùöé)
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üîä ùöÅùöéùöôùöïùö¢ ùö†ùöíùöùùöë *1* ùöòùöõ *2*
> ${config.FOOTER || "ùöôùöòùö†ùöéùöõùöéùöç ùöãùö¢ ùôøùô¥ùô∞ùô∫ùöà-ùô±ùôªùô∏ùôΩùô≥ùô¥ùöÅ-ùôºùô≥"}`;


        const sentMsg = await conn.sendMessage(from, { image: { url: image }, caption: info }, { quoted: mek });
        const messageID = sentMsg.key.id;
        await conn.sendMessage(from, { react: { text: 'üé∂', key: sentMsg.key } });

        // Listen for user reply only once!
        conn.ev.on('messages.upsert', async (messageUpdate) => { 
            try {
                const mekInfo = messageUpdate?.messages[0];
                if (!mekInfo?.message) return;

                const messageType = mekInfo?.message?.conversation || mekInfo?.message?.extendedTextMessage?.text;
                const isReplyToSentMsg = mekInfo?.message?.extendedTextMessage?.contextInfo?.stanzaId === messageID;

                if (!isReplyToSentMsg) return;

                let userReply = messageType.trim();
                let msg;
                let type;
                let response;
                
                if (userReply === "1") {
                    msg = await conn.sendMessage(from, { text: "‚è≥ Processing..." }, { quoted: mek });
                    response = await dy_scrap.ytmp3(`https://youtube.com/watch?v=${id}`);
                    let downloadUrl = response?.result?.download?.url;
                    if (!downloadUrl) return await reply("‚ùå Download link not found!");
                    type = { audio: { url: downloadUrl }, mimetype: "audio/mpeg" };
                    
                } else if (userReply === "2") {
                    msg = await conn.sendMessage(from, { text: "‚è≥ Processing..." }, { quoted: mek });
                    const response = await dy_scrap.ytmp3(`https://youtube.com/watch?v=${id}`);
                    let downloadUrl = response?.result?.download?.url;
                    if (!downloadUrl) return await reply("‚ùå Download link not found!");
                    type = { document: { url: downloadUrl }, fileName: `${title}.mp3`, mimetype: "audio/mpeg", caption: title };
                    
                } else { 
                    return await reply("‚ùå Invalid choice! Reply with 1 or 2.");
                }

                await conn.sendMessage(from, type, { quoted: mek });
                await conn.sendMessage(from, { text: '_s·¥è…¥…¢ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á·¥Ö s·¥ú·¥Ñ·¥úss·¥á“ì·¥ú ü ü è_ ‚úÖ', edit: msg.key });

            } catch (error) {
                console.error(error);
                await reply(`‚ùå *An error occurred while processing:* ${error.message || "Error!"}`);
            }
        });

    } catch (error) {
        console.error(error);
        await conn.sendMessage(from, { react: { text: '‚ùå', key: mek.key } });
        await reply(`‚ùå *An error occurred:* ${error.message || "Error!"}`);
    }
});
                               
